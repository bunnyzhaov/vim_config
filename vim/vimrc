source ~/.vim/bundles.vim

" encoding dectection
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1

"必须在增强模式下(vimwiki要求),所以首先确保关闭了 “compatible” 选项)
set nocompatible

" enable filetype dectection and ft specific plugin/indent
" 开始插件plugin和缩进indent
filetype plugin indent on

" enable syntax hightlight and completion
syntax on

"自动 read 变化
set autoread
"光标放一段时间,插件文件是否变化
autocmd CursorHold * checktime
"刚进入 tab 检查是否发生变化
autocmd TabEnter * checktime

"html折叠
"命令:zf新增折叠,zO打开所有折叠,zo展开单个折叠区,zc聚合单个折叠区,zn展开全部折叠区,zN聚合全部折叠区;
setlocal foldmethod=indent
filetype indent on

"colorscheme desert
set t_Co=256
colorscheme Tomorrow-Night
"colorscheme Tomorrow-Night-Eighties

"高亮查找字符,vim中查找字符时,所有同名字符高亮,方便查找和查看
set hlsearch

" search
set incsearch
" conflict with highlight current line
" set highlight 	
" 搜索时忽略大小写
set ignorecase
set smartcase

" editor settings
"set cursorline
"set nofoldenable                                                  " disable folding"
set history=1000
set confirm                                                       " prompt when existing from an unsaved file
set backspace=indent,eol,start                                    " More powerful backspacing
set t_Co=256                                                      " Explicitly tell vim that the terminal has 256 colors "
set mouse=a                                                       " use mouse in all modes
set report=0                                                      " always report number of lines changed                "
set nowrap                                                        " dont wrap lines
set scrolloff=5                                                   " 5 lines above/below cursor when scrolling
set number                                                        " show line numbers
set showmatch                                                     " show matching bracket (briefly jump)
set showcmd                                                       " show typed command in status bar
set title                                                         " show file in titlebar
set laststatus=2                                                  " use 2 lines for the status bar
set matchtime=2                                                   " show matching bracket for 0.2 seconds
set matchpairs+=<:>                                               " specially for html
" set relativenumber

" Default Indentation 默认的缩进
set smartindent     " indent when
set tabstop=4       " tab width
set softtabstop=4   " backspace
set shiftwidth=4    " indent width
" set textwidth=79
set smarttab
set expandtab       " expand tab to space

"光标,mac要用 iTerm2 才有用
if exists('$TMUX')
      let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
      let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
      let &t_SI = "\<Esc>]50;CursorShape=1\x7"
      let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

"autocmd FileType php setlocal tabstop=2 shiftwidth=2 softtabstop=2
"autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType coffee,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2
"autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
"autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2
"autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Nerd Tree
"autocmd vimenter * NERDTree | wincmd p
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"let NERDChristmasTree=0
"let NERDTreeWinSize=30
"let NERDTreeMouseMode=2 "单击打开目录 双击打开文件"
"let NERDTreeChDirMode=2
"let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', 'node_modules']
"let NERDTreeShowBookmarks=0
"let NERDTreeWinPos = "left"

let g:mta_use_matchparen_group = 1

"tree
"shift+i 显示隐藏文件
"默认打开树形菜单NERDtree
let g:nerdtree_tabs_open_on_console_startup=1
"设置F4为打开或者关闭NERDTree
map <f4> :NERDTreeToggle<CR> 
"map <f4> :NERDTreeMirror<CR> 
"让tree打开在tab
autocmd BufNew * if winnr('$') == 1 | tabmove99 | endif

let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', 'node_modules']
" let NERDTreeShowBookmarks=1

"vim和系统共用剪切板
let g:copycat#auto_sync = 1

set backupdir=~/.vim/tmp
set directory=~/.vim/tmp


" NeoComplCache
"let g:neocomplcache_enable_at_startup=1
"let g:neoComplcache_disableautocomplete=1
"let g:neocomplcache_enable_underbar_completion = 1
"let g:neocomplcache_enable_camel_case_completion = 1
"let g:neocomplcache_enable_smart_case=1
"let g:neocomplcache_min_syntax_length = 3
"let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
"set completeopt-=preview

"python-mode
cd %:p:h
"添加pep8格式忽略,用相应的规范代码忽略,例lamda表达式无法进行pep8格式化,其规范码是E731,所以在这里添加E731的忽略就可以
let g:pymode_lint_ignore = "E501,W0403,W0404,C0110,C0301,C901,W0703,R0201,E265,E731"
let g:pymode_rope_completion=0
let g:pymode_options_max_line_length = 279
"跳转定义的时候,用 e new vnew tabnew 哪种方式打开
let g:pymode_rope_goto_definition_cmd = 'tabnew'

"解决每次保存都要pymode Regenerate autoimport cache 花费半天时间的问题 2016-01-18
call pymode#default('g:pymode_rope_autoimport', 0)
"let g:pymode_rope = 0
let g:pymode_indent = 0

map <f1> i#!/usr/bin/env python<cr># -*- coding: utf-8 -*-<cr><cr>if __name__ == '__main__':<cr>pass<Esc>

"用autopep8来自动格式化python,设置快捷键
map <f2> :!autopep8 --max-line-length 444 --in-place --aggressive --aggressive % <cr><cr>:edit<cr>
map <f3> :w<cr>:PymodeLint <cr>
map <f5> :%w !python

"插入全局搜索vim-ack时的模式串
map  <f4> :Ack --type=python -w  ~/fanlitou

"插入生成代码的相关信息
inoremap <f6> create by zhaopengfei at <c-r>=strftime("%y/%m/%d %H:%M")<cr>
inoremap <f7> modify by zhaopengfei at <c-r>=strftime("%y/%m/%d %H:%M")<cr>

" 设置debug时插入断点代码,使用python自带pdb模块
inoremap <f12> import pdb<cr>pdb.set_trace()



" SuperTab
let g:SuperTabDefultCompletionType='context'
let g:SuperTabDefaultCompletionType = '<C-X><C-U>'
let g:SuperTabRetainCompletionType=2

" ctrlp
set wildignore+=*/tmp/*,*.so,*.o,*.a,*.obj,*.swp,*.zip,*.pyc,*.pyo,*.class,.DS_Store/*,*/logs/*,.git/*  " MacOSX/Linux
let g:ctrlp_custom_ignore = '*\.git$\|\.hg$\|\.svn$'


" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
      \ if ! exists("g:leave_my_cursor_position_alone") |
      \     if line("'\"") > 0 && line ("'\"") <= line("$") |
      \         exe "normal g'\"" |
      \     endif |
      \ endif


" for macvim
if has("gui_running")
    set go=aAce  " remove toolbar
    "set transparency=30
    set guifont=Monaco:h14
    set showtabline=2
    set columns=140
    set lines=40
    noremap <D-M-Left> :tabprevious<cr>
    noremap <D-M-Right> :tabnext<cr>
    map <D-1> 1gt
    map <D-2> 2gt
    map <D-3> 3gt
    map <D-4> 4gt
    map <D-5> 5gt
    map <D-6> 6gt
    map <D-7> 7gt
    map <D-8> 8gt
    map <D-9> 9gt
    map <D-0> :tablast<CR>
endif


" -----------------------------------vimwiki 相关设置----------------------------------------------

autocmd BufNewFile,BufRead *.wiki set filetype=wiki

"vimwiki 第1个wiki的配置
let wiki = {}
"保存时是否将wiki自动生成html
let wiki.auto_export=1
"是否开启按语法折叠  会让文件比较慢
"let g:vimwiki_folding = 1
" 是否在计算字串长度时用特别考虑中文字符
let wiki.vimwiki_CJK_length=1
"设置wiki的索引l目录列表文件名
"let wiki.index='index'
let wiki.index='wiki_index'
"使用markdown语法
"let wiki.syntax='markdown'
let wiki.path='~/Dropbox/knowledge/data/'
let wiki.path_html='~/Dropbox/knowledge/html/'
let wiki.template_path='./'
let wiki.template_default='def_template'
let wiki.template_ext='.html'

"vimwiki 第2个wiki的配置
let wiki_life = {}
let wiki_life.auto_export=1
let wiki_life.index='wiki_life'
let wiki_life.path='~/Dropbox/knowledge/life/'
let wiki_life.path_html='~/Dropbox/knowledge/life_html/'
let wiki_life.template_path='./'
let wiki_life.template_default='def_template'
let wiki_life.template_ext='.html'

let wiki.nested_syntaxes={'python':'python', 'c++':'cpp', 'bash':'sh', 'as3': 'actionscript', 'mxml': 'mxml', 'sql': 'sql', 'html': 'html', 'java': 'java', 'xml': 'xml', 'js': 'javascript', 'coffee':'javascript', 'less':'less', 'css':'css'}
"search.py能够正常工作，否则都是在路径 ~/下

autocmd BufNewFile,BufRead *.wiki cd %:p:h

let g:vimwiki_list=[wiki,wiki_life]
"使用上面定义2个wiki, 设置wiki_list条目
"let g:vimwiki_list=[wiki]

"不需要驼峰英文成为维基词条
let g:vimwiki_camel_case=0
let g:vimwiki_file_exts='py,pdf,txt,doc,rtf,xls,php,zip,rar,7z,html,gz'
let g:vimwiki_browsers=['google-chrome']
